## fit surplus production model to srdb data and stored the results into a new table
## Daniel Ricard started 2010-03-12 from earlier work from Olaf and Coilin
## Last modified Time-stamp: <2010-05-04 13:24:13 (srdbadmin)>
require(RODBC)
require(gplots)

source("get_admb_results.R")

chan <- odbcConnect(dsn="srdbcalo")
## data with TB and TC in MT
qu <- paste("
select a.stockid, v.assessid, v.total as b, v.catch_landings as c from srdb.newtimeseries_values_view v, srdb.timeseries_units_view u, srdb.assessment a where a.assessid=v.assessid and v.assessid=u.assessid and u.total_unit = 'MT' and u.catch_landings_unit = 'MT'
", sep="")

sp.data <- sqlQuery(chan,qu)

my.assessid <- unique(sp.data$assessid)
my.stockid <- unique(sp.data$stockid)
n<-length(my.assessid)
sp.fit <- data.frame(assessid=my.assessid, lnK=rep(-99,n), K=rep(-99,n), lnMSY=rep(-99,n), MSY=rep(-99,n), BMSY=rep(-99,n), FMSY=rep(-99,n), qualityflag=rep(-99,n))

pdf("spfits.pdf", width=8, height=10)
par(mfrow=c(5,4),mar=c(1,1,1,1), oma=c(3.5,3,0,0))

for (i in 1:n) {
print(i)
  temp.dat <- na.omit(subset(sp.data, assessid == my.assessid[i]))

max.b <- max(sp.data$b)

## write ADMB-compatible data file
  my.dat.path<-"/home/srdbadmin/SQLpg/srdb/trunk/ADMB/schaefer.dat"
  cat("# Number of obs \n",dim(temp.dat)[1], "\n",file = my.dat.path, append=FALSE)
  cat("# Bound on K - ln(X*max(biomass)) \n",20, "\n",file = my.dat.path, append=TRUE)
  cat("# observed X values \t observed Y values \n", file = my.dat.path, append=TRUE)
  write.table(cbind(temp.dat$c,temp.dat$b), file=my.dat.path, append = TRUE, col.names=FALSE,row.names=FALSE)
## call to ADMB
  system("cd /home/srdbadmin/SQLpg/srdb/trunk/ADMB; rm schaefer.std; ./schaefer")

## did the model converge?
conv <- length(system("ls /home/srdbadmin/SQLpg/srdb/trunk/ADMB/schaefer.std", intern=TRUE))
if(conv) {
## read in parameter estimates from ADMB output
admb.fit <- get.admb.results("/home/srdbadmin/SQLpg/srdb/trunk/ADMB/","schaefer")
admb.rep<-readLines("/home/srdbadmin/SQLpg/srdb/trunk/ADMB/schaefer.rep")

sp.fit$assessid[i]<-my.assessid[i]
sp.fit$lnK[i] <- admb.fit[1,3]
sp.fit$K[i] <- exp(sp.fit$lnK[i])
sp.fit$lnMSY[i] <- admb.fit[2,3]
sp.fit$MSY[i] <- exp(sp.fit$lnMSY[i])
sp.fit$BMSY[i] <- as.numeric(strsplit(admb.rep, split="\t")[[1]])[1]
sp.fit$FMSY[i] <- as.numeric(strsplit(admb.rep, split="\t")[[1]])[2]
if(sp.fit$lnK[i] < 0) sp.fit$qualityflag[i] <- -8 else sp.fit$qualityflag[i] <- 1

##plot(na.omit(as.numeric(strsplit(admb.rep, split=" ")[[2]])))

## generate surplus production vs. total biomass plot as per Olaf's
tb<-na.omit(as.numeric(strsplit(admb.rep, split=" ")[[2]]))
ll<-length(tb)
tb<-tb[1:ll-1] # get rid of last biomass data point
sp.obs<-na.omit(as.numeric(strsplit(admb.rep, split=" ")[[3]]))
sp.pred<-na.omit(as.numeric(strsplit(admb.rep, split=" ")[[4]]))

plot.colors <- colorRampPalette(c("blue","red"), space="Lab")(ll) ## rich.colors(ll)
plot(tb,sp.obs,type='p',col=plot.colors,xlab="Total Biomass",ylab="Surplus Production")
lines(tb,sp.obs,col=grey(0.5),lwd=0.5)

# generate the predicted surplus production over a regularly spaced grid
mi <- min(tb)
ma <- max(tb)
ss <- (ma-mi)/100
reg.grid <- seq(mi,ma,ss)

pp <- (4*sp.fit$MSY[i]*reg.grid) / sp.fit$K[i]-(4*sp.fit$MSY[i])*(reg.grid/sp.fit$K[i])^2

## lines(tb[order(tb)],sp.pred[order(tb)],type='l',col="black")
lines(reg.grid,pp,type='l',col="black",lwd=1.5)

legend("topleft", legend=my.stockid[i], bty="n")
} # end if
else {
sp.fit$assessid[i]<-my.assessid[i]
sp.fit$lnK[i] <- -8
sp.fit$K[i] <- -8
sp.fit$lnMSY[i] <- -8
sp.fit$MSY[i] <- -8
sp.fit$BMSY[i] <- -8
sp.fit$FMSY[i] <- -8
sp.fit$qualityflag[i] <- -8

} # end else


}

dev.off()
# send the fitted parameter values, SSBmsy and MSY back to srdb
sqlSave(chan, sp.fit, tablename="srdb.spfits",safer=FALSE)

## delete the assessments flagged by Olaf and UW as inappropriate
qu <- paste("DELETE FROM srdb.spfits where assessid in ",
"('AFSC-DSOLEGA-1978-2010-STANTON',
'AFSC-WPOLLGA-1964-2008-MELNYCHUK',
'NEFSC-QUAHATLC-1978-2008-CHUTE',
'NWFSC-BLUEROCKCAL-1916-2007-BRANCH',
'INIDEP-SBWHITARGS-1985-2007-Parma',
'NEFSC-ATHAL5YZ-1800-2007-COL',
'AFSC-BKINGCRABPI-1960-2008-JENSEN',
'AFSC-FLSOLEGA-1978-2008-STANTON',
'AFSC-GHALBSAI-1960-2009-STANTON',
'AFSC-REXSOLEGA-1979-2008-STANTON',
'AFSC-REYEROCKBSAI-1974-2009-STANTON',
'AFSC-REYEROCKGA-1974-2007-MELNYCHUK',
'AFSC-SRAKEROCKBSAI-1977-2008-STANTON',
'AFSC-WPOLLAI-1976-2008-MELNYCHUK',
'AFSC-YSOLEBSAI-1959-2008-MELNYCHUK',
'CSIRO-BIGHTREDSE-1958-2007-FULTON',
'CSIRO-NZLINGWSE-1968-2007-FULTON',
'DFO-NFLD-AMPL23K-1960-2004-PREFONTAINE',
'MARAM-CRLOBSTERSA12-1910-2008-Johnston',
'MARAM-CRLOBSTERSA34-1910-2008-Johnston',
'MARAM-CRLOBSTERSA56-1910-2008-Johnston',
'MARAM-CRLOBSTERSA7-1910-2008-Johnston',
'MARAM-CRLOBSTERSA8-1910-2008-Johnston',
'MARAM-DEEPCHAKESA-1917-2008-DEDECKER',
'MARAM-PTOOTHFISHPEI-1960-2008-DEDECKER',
'MARAM-SAABALONESA-1951-2008-PLAGANYI',
'NWFSC-KELPGREENLINGORECOAST-1979-2005-STANTON',
'NZMFishLOBSTERWG-RROCKLOBSTERCRA3-1945-2007-JENSEN',
'NZMFishMIDDEPTHSWG-SOUTHHAKECR-1975-2006-JENSEN',
'NZMFishMIDDEPTHSWG-SOUTHHAKESA-1975-2007-JENSEN',
'SEFSC-SNOWGROUPSATLC-1961-2002-STANTON',
'SWFSC-SBELLYROCKPCOAST-1950-2005-BRANCH',
'WGNSSK-SOLEVIId-1981-2006-MINTO')
", sep="")

sqlQuery(chan,qu)

## delete entries that have not converged
qu <- "DELETE FROM srdb.spfits where qualityflag=-8"
sqlQuery(chan,qu)


## now generate another pdf document that only contains the surplus production fits that are satisfactory

## data with TB and TC in MT
qu <- paste("
select a.stockid, v.assessid, v.total as b, v.catch_landings as c from srdb.newtimeseries_values_view v, srdb.timeseries_units_view u, srdb.assessment a where a.assessid=v.assessid and v.assessid=u.assessid and u.total_unit = 'MT' and u.catch_landings_unit = 'MT' and a.assessid in (select assessid from srdb.spfits)
", sep="")

sp.data.cleaned <- sqlQuery(chan,qu)

my.assessid <- unique(sp.data.cleaned$assessid)
my.stockid <- unique(sp.data.cleaned$stockid)
n<-length(my.assessid)


pdf("spfits-MANUALLY-CLEANED.pdf", width=8, height=10)
par(mfrow=c(5,4),mar=c(1,1,1,1), oma=c(3.5,3,0,0))


for (i in 1:n) {
print(i)
  temp.dat <- na.omit(subset(sp.data.cleaned, assessid == my.assessid[i]))

max.b <- max(sp.data$b)

## write ADMB-compatible data file
  my.dat.path<-"/home/srdbadmin/SQLpg/srdb/trunk/ADMB/schaefer.dat"
  cat("# Number of obs \n",dim(temp.dat)[1], "\n",file = my.dat.path, append=FALSE)
  cat("# Bound on K - ln(X*max(biomass)) \n",20, "\n",file = my.dat.path, append=TRUE)
  cat("# observed X values \t observed Y values \n", file = my.dat.path, append=TRUE)
  write.table(cbind(temp.dat$c,temp.dat$b), file=my.dat.path, append = TRUE, col.names=FALSE,row.names=FALSE)
## call to ADMB
  system("cd /home/srdbadmin/SQLpg/srdb/trunk/ADMB; rm schaefer.std; ./schaefer")

## did the model converge?
conv <- length(system("ls /home/srdbadmin/SQLpg/srdb/trunk/ADMB/schaefer.std", intern=TRUE))
if(conv) {
## read in parameter estimates from ADMB output
admb.fit <- get.admb.results("/home/srdbadmin/SQLpg/srdb/trunk/ADMB/","schaefer")
admb.rep<-readLines("/home/srdbadmin/SQLpg/srdb/trunk/ADMB/schaefer.rep")

sp.fit$assessid[i]<-my.assessid[i]
sp.fit$lnK[i] <- admb.fit[1,3]
sp.fit$K[i] <- exp(sp.fit$lnK[i])
sp.fit$lnMSY[i] <- admb.fit[2,3]
sp.fit$MSY[i] <- exp(sp.fit$lnMSY[i])
sp.fit$BMSY[i] <- as.numeric(strsplit(admb.rep, split="\t")[[1]])[1]
sp.fit$FMSY[i] <- as.numeric(strsplit(admb.rep, split="\t")[[1]])[2]
if(sp.fit$lnK[i] < 0) sp.fit$qualityflag[i] <- -8 else sp.fit$qualityflag[i] <- 1

##plot(na.omit(as.numeric(strsplit(admb.rep, split=" ")[[2]])))

## generate surplus production vs. total biomass plot as per Olaf's
tb<-na.omit(as.numeric(strsplit(admb.rep, split=" ")[[2]]))
ll<-length(tb)
tb<-tb[1:ll-1] # get rid of last biomass data point
sp.obs<-na.omit(as.numeric(strsplit(admb.rep, split=" ")[[3]]))
sp.pred<-na.omit(as.numeric(strsplit(admb.rep, split=" ")[[4]]))

plot.colors <- colorRampPalette(c("blue","red"), space="Lab")(ll) ## rich.colors(ll)
plot(tb,sp.obs,type='p',col=plot.colors,xlab="Total Biomass",ylab="Surplus Production")
lines(tb,sp.obs,col=grey(0.5),lwd=0.5)

# generate the predicted surplus production over a regularly spaced grid
mi <- min(tb)
ma <- max(tb)
ss <- (ma-mi)/100
reg.grid <- seq(mi,ma,ss)

pp <- (4*sp.fit$MSY[i]*reg.grid) / sp.fit$K[i]-(4*sp.fit$MSY[i])*(reg.grid/sp.fit$K[i])^2

## lines(tb[order(tb)],sp.pred[order(tb)],type='l',col="black")
lines(reg.grid,pp,type='l',col="black",lwd=1.5)

legend("topleft", legend=my.stockid[i], bty="n")
} # end if
else {
sp.fit$assessid[i]<-my.assessid[i]
sp.fit$lnK[i] <- -8
sp.fit$K[i] <- -8
sp.fit$lnMSY[i] <- -8
sp.fit$MSY[i] <- -8
sp.fit$BMSY[i] <- -8
sp.fit$FMSY[i] <- -8
sp.fit$qualityflag[i] <- -8

} # end else


}

dev.off()

odbcClose(chan)
