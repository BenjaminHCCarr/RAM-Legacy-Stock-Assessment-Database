#!/usr/bin/perl -w
# script to output a quality assured, quality controlled pdf for all loaded assessments from a given recorder
# Cóilín Minto
# date: Mon Mar  9 12:15:58 ADT 2009
# Time-stamp: <2009-11-09 17:38:38 (srdbadmin)>
# Modification history:
# 
use strict;
use warnings;
use DBI;
use LaTeX::Table;
use File::chdir;
use File::Basename;

die "Need to supply an assessor ID\n" if @ARGV <1;
my $assessorid=$ARGV[0];
print "Processing assessor: $assessorid \n";
# open a connection to the database
my $dbh = DBI->connect("dbi:Pg:dbname=srdb;host=localhost;port=5432;" ,
                      "srdbuser", "srd6us3r!")
		      || die "Database connection not made: $DBI::errstr";
#-------------------------------------
# get all assessids from this assessor
#-------------------------------------
my $alistsql = qq{select distinct assessid from srdb.assessment where recorder = \'$assessorid\'}; # assess (a) list
my $alisthandle = $dbh -> prepare($alistsql);
$alisthandle -> execute();

my @alistarray;

while (my @alrow = $alisthandle->fetchrow_array) {  # retrieve one row
      push(@alistarray, @alrow);
    }
my @pdflistarray;
foreach (@alistarray) {
  my @systemcall=("/usr/bin/perl", "/home/srdbadmin/SQLpg/srdb/trunk/perl/srDB-QAQCv0.2.pl", "$_");
  system(@systemcall);
  push(@pdflistarray, "/home/srdbadmin/SQLpg/srdb/trunk/tex/" . $_ . ".pdf");
}

#-------------------------------
# create the first page
#-------------------------------
# the name of the recorder
my $recordersql = qq{select firstname from srdb.recorder where nameinxls=\'$assessorid\'};
my $recorderhandle = $dbh -> prepare($recordersql);
$recorderhandle -> execute();
my @recorderresult = $recorderhandle->fetchrow_array();
$recorderhandle->finish();
my $recorderid=$recorderresult[0];
print "$assessorid . $recorderid";

# number of assesments they entered
my $assessnumsql = qq{select count(assessid) from srdb.assessment where assessid like \'%$assessorid%\'};
my $assessnumhandle = $dbh -> prepare($assessnumsql);
$assessnumhandle -> execute();
my @assessnumresult = $assessnumhandle->fetchrow_array();
$assessnumhandle->finish();
my $assessnum=$assessnumresult[0];
my $plural;
if($assessnum > 1){$plural='s'}else{$plural=''}

#------------------------------------------
# LaTeX file replacements
#------------------------------------------
# create an assessment-specific tex file
my $temptex="/home/srdbadmin/SQLpg/srdb/trunk/tex/templates/QAQC_instructions_to_recorders_template.tex";
my $outtex="/home/srdbadmin/SQLpg/srdb/trunk/tex/" . $assessorid . "_QAQC.tex";

## Open the file
open (IN, "$temptex") || die $!;
## print the modified contents to out file
#open (OUT, ">$outtex") || die $!;
open (OUT, ">$outtex") || die $!;
while ($_ = <IN> ) {
## If text exists, replace text
# area
if ($_ =~ /RECORDERID/) {
       # Replace text, all instances on a line (/g)
       $_ =~ s/RECORDERID/$recorderid/g;
     }
if ($_ =~ /ASSESSNUM/) {
       # Replace text, all instances on a line (/g)
       $_ =~ s/ASSESSNUM/$assessnum/g;
     }
if ($_ =~ /PLURAL/) {
       # Replace text, all instances on a line (/g)
       $_ =~ s/PLURAL/$plural/g;
     }
     print OUT "$_";
  }

foreach (@pdflistarray) {
my $pdffilename=basename($_);
my @pdffilename= split(/.pdf/, $pdffilename);
my $stockname=$pdffilename[0];
print OUT '\includepdf[pagecommand={\thispagestyle{plain}}, addtotoc={1,subsubsection,1,' . "$stockname" . ',lmemap}, pages={1,2}]{' . "$_" ."}\n";
} 
print OUT '\includepdf[angle=90, addtotoc={1,subsubsection,1,LME map,lmemap}]{/home/srdbadmin/SQLpg/srdb/trunk/tex/lme_map.pdf}';
print OUT '\end{document}'. "\n";
close(IN);
close(OUT);

# compile the first page

system("pdflatex -output-directory /home/srdbadmin/SQLpg/srdb/trunk/tex  $outtex");
system("pdflatex -output-directory /home/srdbadmin/SQLpg/srdb/trunk/tex  $outtex");
#my $outpdffile = "/home/srdbadmin/SQLpg/srDB/tex/" . $assessorid . "_QAQC.pdf";
## clean up, removes extra files generated by latex
my $outtexlog= "/home/srdbadmin/SQLpg/srdb/trunk/tex/" . $assessorid . "_QAQC.log";
my $outtexaux= "/home/srdbadmin/SQLpg/srdb/trunk/tex/" . $assessorid . "_QAQC.aux";
my $outtexout= "/home/srdbadmin/SQLpg/srdb/trunk/tex/" . $assessorid . "_QAQC.out";
unlink $outtexlog, $outtexaux, $outtexout || die "Cannot open file";

#----------------
$dbh->disconnect();
